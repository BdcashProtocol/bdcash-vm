/**
 * NAME: BDCASH SMART CONTRACTS INDEX
 * DESCRIPTION: THIS CONTRACT WILL MAINTAIN THE STATE OF THE CONTRACTS AND RETURN THE POSITION OF THE CONTRACTS IN KNOWN NETWORK
 * AUTHOR: TURINGLABS
 * VERSION: 1.1.8
 * IMMUTABLE: false
 */

// DEFINING COMPILER VERSION
/* BDCash v0.0.1 */

async function constructor() {
    
}

async function public: eachBlock(block){
    searchdata(block['data_written'])
}

async function public: ifMempool(mempool){
    searchdata(mempool['data_written'])
}

async function private: searchdata(data){
    if(Object.keys(data).length > 0){
        let keys = Object.keys(data)
        for(let k in Object.keys(data)){
            console.log('ANALYZING DATA FOR ' + keys[k])
            for(let j in data[keys[k]]){
                let written = data[keys[k]][j]
                if(written.protocol === 'pin://'){
                    let check = await db.read({contract: written.data})
                    if(check.contract === undefined){
                        let obj = {
                            contract: written.data,
                            nodeshs: [written.refID]
                        }
                        let result = await db.insert(obj)
                    } else {
                        let nodeshs = check.nodeshs
                        if(nodeshs.indexOf(written.refID) === -1){
                            nodeshs.push(written.refID)
                            await db.update({contract: written.data}, { $set: { nodeshs: nodeshs } })
                        }
                    }
                }else if(written.protocol === 'unpin://'){
                    let check = await db.read({contract: written.data})
                    if(check.contract !== undefined){
                        let nodeshs = check.nodeshs
                        let toupdate = []
                        for(let y in nodeshs){
                            if(nodeshs[y] !== written.refID){
                                toupdate.push(nodeshs[y])
                            }
                        }
                        await db.update({contract: written.data}, { $set: { nodeshs: toupdate } })
                    }
                }
            }
        }
    }
}

function public: index(request) {
    return new Promise(async response => {
        if (request !== undefined && request.contract !== undefined && request.version !== undefined) {
            let check
            console.log(request)
            if(request.version === 'latest'){
                check = await db.read({contract: request.contract })
            }else{
                check = await db.read({contract: request.contract + ':' + request.version })
            }
            console.log(check)
            if(check.contract !== undefined){
                let nodeshs = check.nodeshs
                let nodes = await axios.get('https://raw.githubusercontent.com/BdcashProtocol/bdcash-nodesh-network/master/peers')
                let peers = nodes.data.split("\n")
                let parsed = []
                for(let k in nodeshs){
                    let nodesh = nodeshs[k]
                    for (let x in peers) {
                        let peer = peers[x].split(':')
                        if(peer[2] === nodesh){
                            parsed.push({
                                pubkey: peer[2],
                                url: 'https://nodesh' + peer[0] + '.bdcashprotocol.com',
                                ip: peer[1]
                            })
                        }
                    }
                }
                response(parsed)
            }else{
                response({ message: "No nodeshs available.", contract: request.contract, error: true})
            }
        } else {
            response('Please requests for a contract first')
        }
    })
}